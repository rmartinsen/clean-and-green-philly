name: PR Checks

on:
  push:
    branches:
     - staging
    paths:
      - 'data/**'
  pull_request:
    branches:
      - staging
  workflow_dispatch:  # Allows manual trigger

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: data/src
    env:
      POSTGRES_PASSWORD: "some-secure-password"
      VACANT_LOTS_DB: "postgresql://postgres::${POSTGRES_PASSWORD}@localhost:5433/vacantlotdb"
    services:
      postgres:
        image: postgis/postgis:16-3.4
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: "some-secure-password"
          POSTGRES_DB: test_db
        ports:
          - 5433:5432
        # Set health checks to wait until postgres is ready
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Build Postgres container
        run: docker compose build postgres
        working-directory: data
        
      - name: Start Postgres
        run: |
          docker compose up postgres -d
          # Wait for postgres to be ready
          sleep 10
        working-directory: data 
        
      - name: Install and configure pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          echo "Using Python: $(which python)"
          pipenv --python $(which python) install --dev

      - run: pipenv run pytest
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true

      - name: Run Prettier Check
        run: npm run format:check
        continue-on-error: true

      - name: Check linting and formatting
        if: failure()
        run: |
          echo "Linting or formatting issues found. Please run 'npm run lint:fix' and 'npm run format' to fix them."
          exit 1

      - name: Linting and formatting success
        if: success()
        run: echo "No linting or formatting issues found. Good job!"
